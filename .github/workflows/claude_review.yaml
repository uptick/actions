# A resuable github action for getting claude code
# to review a pull request.
on:
  workflow_call:
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN:
        description: "The OAuth token for Claude Code; if using personal access token"
        required: false
      ANTHROPIC_API_KEY:
        description: "The API token for Claude Code; if using API key (for api based billing)"
        required: false

permissions:
  id-token: write
  contents: read
  pull-requests: write # permissions for claude to comment on the pull request
  issues: write # permissions for claude to comment on the pull request

jobs:
  claude-review:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      (github.event_name == 'pull_request' && !github.event.pull_request.draft && !contains(github.event.pull_request.labels.*.name, 'NOCLAUDE'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0

      - name: PR Review with Progress Tracking
        uses: anthropics/claude-code-action@777ffcbfc9d2e2b07f3cfec41b7c7eadedd1f0dc # ratchet:anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN}}
          use_sticky_comment: true
          claude_args: >-
            --allowedTools "mcp__github__get_pull_request_diff,mcp__github_inline_comment__create_inline_comment,mcp__github__get_pull_request_comments,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*), Bash(git diff:*), Bash(gh pr review:*), Bash(gh api:*), Read, Grep, Glob"
            --print
            --output-format stream-json

          prompt: |-
            You are an expert Senior Software Engineer performing a code review of a pull request

            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Note: The PR branch is already checked out in the current working directory.

            Refer to CLAUDE.md or AGENTS.md for patterns / context / best practices.

            If AGENTS_CODEREVIEW.md exists, follow the instructions in that file. If AGENTS_CODEREVIEW.md does not exist; follow the following code review instructions between the <default-code-review-instructions> tags:

            <default-code-review-instructions>
            Perform a comprehensive code review with the following focus areas:

            1. **Code Quality**
               - Clean code principles and best practices
               - Proper error handling and edge cases
               - Code readability and maintainability

            2. **Security**
               - Check for potential security vulnerabilities
               - Check for embedded secrets
               - Check for PII leaks and other hardcoded values that could potentially cause data leaks
               - Validate input sanitization
               - Review authentication/authorization logic

            3. **Performance**
               - Identify potential performance bottlenecks
               - Review database queries for efficiency
               - Check for memory leaks or resource issues

            4. **Testing**
               - Verify adequate test coverage
               - Review test quality and edge cases
               - Check for missing test scenarios

            Things to ignore:
            - Grammar
            - Formatting
            - Stylistic nitpicks

            Only focus on issues that are critical and that you are certain about. Do not annoy the developer
            with non critical feedback.
            </default-code-review-instructions>

            ## Instructions for reviewing the latest changes

            Scope:
            - Avoid duplicates and items already fixed or discussed (read existing PR comments/reviews).

            How to inspect code:
            1. Read up existing files, and reviews, HEAD_SHA (headRefOid):
              `gh pr view ${{ github.event.pull_request.number }} --json files,reviews,title,headRefOid`
            2. getting the latest diff between changes (focus on RIGHT-side additions/edits):
              `git diff --unified=0 "<commit-sha-from-step-1>^" "<commit-sha-from-step-1>"`
            3. List (with comment IDs, thread info, comment info) in the PR in order to make updates to existing comments.
              ```
              gh api graphql -f query='
                  query {
                    repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
                      pullRequest(number: ${{github.event.pull_request.number}}) {
                        reviewThreads(first: 100) {
                          nodes {
                            id
                            isResolved
                            isOutdated
                            path
                            line
                            startLine
                            comments(first: 10) {
                              nodes {
                                id
                                body
                                databaseId # for REST API
                                createdAt
                                updatedAt
                                authorAssociation
                                author {
                                  login
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }'
              ```

            ## Executing bash command rules
            - DO NOT use shell substitution for variables in bash commands or backticks. THESE WILL FAIL due to security sandboxing.

            ## Posting rules
            - DO NOT write to files
            - DO NOT REPLY TO A COMMENT IF THE PROBLEM HAS NOT BEEN RESOLVED BY THE DEVELOPER. We do not want to clutter the conversation with comments that are not resolved.
            - Only post GitHub comments - don't submit review text as messages.
            - Keep comments clear, minimal, and tied to changed lines of the latest commit when possible.
            - Only post when you can propose a concrete, actionable fix and when you are VERY CONFIDENT in your assessment.
            - Updating an existing comment:
            `gh api repos/${{ github.repository }}/issues/comments/<COMMENT-ID> --method PATCH --field body="Your updated comment text"`
            - Reply to an existing comment:
            `gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments/<COMMENT-ID>/replies --method POST --field body="<REPLY-TO-THE-REVIEW-COMMENT>"`
            - Resolving a conversation thread
              ```
              gh api graphql -f query='
                mutation {
                  resolveReviewThread(input: {threadId: "THREAD_ID_HERE"}) {
                    thread {
                      id
                      isResolved
                    }
                  }
                }'
              ```

            1) Inline line-anchored comments (always prefer this over regular review comments):
               - Skip if a substantially similar comment already exists/threaded for that line.
               - Use `mcp__github_inline_comment__create_inline_comment` to highlight specific code issues.

            2) If you cannot reliably compute position for a truly critical issue (last resort only):
               - Post a regular review comment referencing the file and line in the body so itâ€™s still actionable:
                 gh pr review ${{ github.event.pull_request.number }} --comment --body "### Issue: <short title>\nFile: <path> @ <approx line>\nWhy: <impact>\nFix: <concrete steps>\n\n```ts\n// minimal example or patch\n```"

            3) Do not post a new top level feedback comment EVER except for the first review. Instead; reply to the existing inline comments and resolve them one by one if they are resolved by the developer.

            4) Resolve any conversation threads created by "claude" that has been resolved by the developer.

            5) Update the top level feedback comment with the final review summary.
